$(document).ready(function () {
    let currentPage = 1;
    const rowsPerPage = 10;
    let totalDataCount = 0;
    let data = [];
    let filteredData = [];
    let sortKey = '';
    let sortOrder = 'asc';

    async function fetchData(page) {
        const start = (page - 1) * rowsPerPage;
        return new Promise((resolve, reject) => {
            $.ajax({
                type: 'POST',
                url: '../user.php',
                data: { action: 'getLimitData', start: start, end: rowsPerPage },
                success: function (response) {
                    var parsedResponse = JSON.parse(response);
                    if (parsedResponse && parsedResponse.status) {
                        resolve(parsedResponse.data);
                    } else {
                        reject('Failed to fetch data');
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    reject(`AJAX request failed: ${textStatus}, ${errorThrown}`);
                }
            });
        });
    }

    async function fetchTotalDataCount() {
        return new Promise((resolve, reject) => {
            $.ajax({
                type: 'POST',
                url: '../user.php',
                data: { action: 'getTableCount' ,table:'Login_Logs' },
                success: function (response) {
                    var parsedResponse = JSON.parse(response);
                    if (parsedResponse && parsedResponse.status) {
                        resolve(parsedResponse.count);
                    } else {
                        reject('Failed to fetch total data count');
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    reject(`AJAX request failed: ${textStatus}, ${errorThrown}`);
                }
            });
        });
    }

    async function loadData(query = '') {
        try {
            totalDataCount = await fetchTotalDataCount();
            data = await fetchData(currentPage);
            filteredData = data; // Use fetched data as initial filtered data
            if (query) {
                filteredData = filterData(query);
            }
            renderTable(currentPage);
            renderPagination();
        } catch (error) {
            console.error('Error loading data:', error);
        }
    }

    function renderTable(page) {
        const $tableBody = $('#dataTable tbody');
        $tableBody.empty();

        $.each(filteredData, function (index, item) {
            const $row = $('<tr>');
            $('<td>').text(item.id).appendTo($row);
            $('<td>').text(item.browser).appendTo($row);
            $('<td>').text(item.platform).appendTo($row);
            $('<td>').text(item.ip).appendTo($row);
            $('<td>').text(item.last_login).appendTo($row);
            $tableBody.append($row);
        });
    }

    function renderPagination() {
        const totalPages = Math.ceil(totalDataCount / rowsPerPage);
        const $pagination = $('.pagination');
        $pagination.empty();

        for (let i = 1; i <= totalPages; i++) {
            const $button = $('<button>').text(i);
            if (i === currentPage) {
                $button.attr('disabled', true);
            }
            $button.on('click', function () {
                currentPage = i;
                loadData();
            });
            $pagination.append($button);
        }
    }

    function sortData(sortKey, sortOrder) {
        filteredData.sort((a, b) => {
            if (a[sortKey] < b[sortKey]) return sortOrder === 'asc' ? -1 : 1;
            if (a[sortKey] > b[sortKey]) return sortOrder === 'asc' ? 1 : -1;
            return 0;
        });
        renderTable(currentPage);
    }

    function filterData(query) {
        return data.filter(item => {
            return Object.values(item).some(val =>
                String(val).toLowerCase().includes(query.toLowerCase())
            );
        });
    }

    $('#dataTable th').on('click', function () {
        sortKey = $(this).data('sort');
        sortOrder = $(this).data('sort-order') === 'asc' ? 'desc' : 'asc';
        $(this).data('sort-order', sortOrder);
        sortData(sortKey, sortOrder);
    });

    $('#filterInput').on('input', function () {
        const query = $(this).val();
        filteredData = filterData(query);
        renderTable(currentPage);
    });

    loadData();
});
